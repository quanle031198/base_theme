/* eslint-disable */
export class KatexOptions {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9zcmMva2F0ZXgtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsTUFBTSxPQUFPLFlBQVk7Q0E4RXhCIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuZXhwb3J0IGNsYXNzIEthdGV4T3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgbWF0aCB3aWxsIGJlIHJlbmRlcmVkIGluIGRpc3BsYXkgbW9kZVxyXG4gICAgICogKG1hdGggaW4gZGlzcGxheSBzdHlsZSBhbmQgY2VudGVyIG1hdGggb24gcGFnZSlcclxuICAgICAqXHJcbiAgICAgKiBJZiBgZmFsc2VgLCBtYXRoIHdpbGwgYmUgcmVuZGVyZWQgaW4gaW5saW5lIG1vZGVcclxuICAgICAqIEBkZWZhdWx0IGZhbHNlXHJcbiAgICAgKi9cclxuICAgIGRpc3BsYXlNb2RlPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCBLYVRlWCB3aWxsIHRocm93IGEgYFBhcnNlRXJyb3JgIHdoZW5cclxuICAgICAqIGl0IGVuY291bnRlcnMgYW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBvciBpbnZhbGlkIExhVGV4XHJcbiAgICAgKlxyXG4gICAgICogSWYgYGZhbHNlYCwgS2FUZVggd2lsbCByZW5kZXIgdW5zdXBwb3J0ZWQgY29tbWFuZHMgYXNcclxuICAgICAqIHRleHQsIGFuZCByZW5kZXIgaW52YWxpZCBMYVRlWCBhcyBpdHMgc291cmNlIGNvZGUgd2l0aFxyXG4gICAgICogaG92ZXIgdGV4dCBnaXZpbmcgdGhlIGVycm9yLCBpbiBjb2xvciBnaXZlbiBieSBlcnJvckNvbG9yXHJcbiAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgKi9cclxuICAgIHRocm93T25FcnJvcj86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEEgQ29sb3Igc3RyaW5nIGdpdmVuIGluIGZvcm1hdCBgI1hYWGAgb3IgYCNYWFhYWFhgXHJcbiAgICAgKi9cclxuICAgIGVycm9yQ29sb3I/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEEgY29sbGVjdGlvbiBvZiBjdXN0b20gbWFjcm9zLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBgc3JjL21hY3Jvcy5qc2AgZm9yIGl0cyB1c2FnZVxyXG4gICAgICovXHJcbiAgICBtYWNyb3M/OiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgYFxcY29sb3JgIHdpbGwgd29yayBsaWtlIExhVGVYJ3MgYFxcdGV4dGNvbG9yYFxyXG4gICAgICogYW5kIHRha2VzIDIgYXJndW1lbnRzXHJcbiAgICAgKlxyXG4gICAgICogSWYgYGZhbHNlYCwgYFxcY29sb3JgIHdpbGwgd29yayBsaWtlIExhVGVYJ3MgYFxcY29sb3JgXHJcbiAgICAgKiBhbmQgdGFrZXMgMSBhcmd1bWVudFxyXG4gICAgICpcclxuICAgICAqIEluIGJvdGggY2FzZXMsIGBcXHRleHRjb2xvcmAgd29ya3MgYXMgaW4gTGFUZVhcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAgICovXHJcbiAgICBjb2xvcklzVGV4dENvbG9yPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQWxsIHVzZXItc3BlY2lmaWVkIHNpemVzIHdpbGwgYmUgY2FwZWQgdG8gYG1heFNpemVgIGVtc1xyXG4gICAgICpcclxuICAgICAqIElmIHNldCB0byBJbmZpbml0eSwgdXNlcnMgY2FuIG1ha2UgZWxlbWVudHMgYW5kIHNwYWNlXHJcbiAgICAgKiBhcmJpdHJhcmlseSBsYXJnZVxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IEluZmluaXR5XHJcbiAgICAgKi9cclxuICAgIG1heFNpemU/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIExpbWl0IHRoZSBudW1iZXIgb2YgbWFjcm8gZXhwYW5zaW9ucyB0byBzcGVjaWZpZWQgbnVtYmVyXHJcbiAgICAgKlxyXG4gICAgICogSWYgc2V0IHRvIGBJbmZpbml0eWAsIG1hcmNvIGV4cGFuZGVyIHdpbGwgdHJ5IHRvIGZ1bGx5IGV4cGFuZFxyXG4gICAgICogYXMgaW4gTGFUZXhcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCAxMDAwXHJcbiAgICAgKi9cclxuICAgIG1heEV4cGFuZD86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogQWxsb3dlZCBwcm90b2NvbHMgaW4gYFxcaHJlZmBcclxuICAgICAqXHJcbiAgICAgKiBVc2UgYF9yZWxhdGl2ZWAgdG8gYWxsb3cgcmVsYXRpdmUgdXJsc1xyXG4gICAgICpcclxuICAgICAqIFVzZSBgKmAgdG8gYWxsb3cgYWxsIHByb3RvY29sc1xyXG4gICAgICovXHJcbiAgICBhbGxvd2VkUHJvdG9jb2xzPzogc3RyaW5nW107XHJcbiAgICAvKipcclxuICAgICAqIElmIGBmYWxzZWAgb3IgYFwiaWdub3JlXCJgLCBhbGxvdyBmZWF0dXJlcyB0aGF0IG1ha2VcclxuICAgICAqIHdyaXRpbmcgaW4gTGFUZXggY29udmVuaWVudCBidXQgbm90IHN1cHBvcnRlZCBieSBMYVRleFxyXG4gICAgICpcclxuICAgICAqIElmIGB0cnVlYCBvciBgXCJlcnJvclwiYCwgdGhyb3cgYW4gZXJyb3IgZm9yIHN1Y2ggdHJhbnNncmVzc2lvbnNcclxuICAgICAqXHJcbiAgICAgKiBJZiBgXCJ3YXJuXCJgLCB3YXJuIGFib3V0IGJlaGF2aW9yIHZpYSBgY29uc29sZS53YXJuYFxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IFwid2FyblwiXHJcbiAgICAgKi9cclxuICAgIHN0cmljdD86IGJvb2xlYW4gfCBzdHJpbmcgfCBGdW5jdGlvbjtcclxufVxyXG4iXX0=